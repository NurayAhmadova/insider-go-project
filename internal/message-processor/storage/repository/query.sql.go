// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const listSentMessages = `-- name: ListSentMessages :many
SELECT id, msisdn, content, sent, created_at, updated_at FROM messages WHERE sent = true
`

// theoretically should be paginated
//
//	SELECT id, msisdn, content, sent, created_at, updated_at FROM messages WHERE sent = true
func (q *Queries) ListSentMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listSentMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Msisdn,
			&i.Content,
			&i.Sent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnsentMessages = `-- name: ListUnsentMessages :many
SELECT id, msisdn, content, sent, created_at, updated_at FROM messages WHERE sent = false ORDER BY created_at DESC FOR UPDATE SKIP LOCKED LIMIT $1
`

// ListUnsentMessages
//
//	SELECT id, msisdn, content, sent, created_at, updated_at FROM messages WHERE sent = false ORDER BY created_at DESC FOR UPDATE SKIP LOCKED LIMIT $1
func (q *Queries) ListUnsentMessages(ctx context.Context, limit int32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listUnsentMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Msisdn,
			&i.Content,
			&i.Sent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSentStatus = `-- name: UpdateSentStatus :exec
UPDATE messages m SET sent=true WHERE m.id = $1
`

// UpdateSentStatus
//
//	UPDATE messages m SET sent=true WHERE m.id = $1
func (q *Queries) UpdateSentStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateSentStatus, id)
	return err
}
