// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	model "insider-go-project/internal/message-processor/storage/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessagesRepository is a mock of MessagesRepository interface.
type MockMessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesRepositoryMockRecorder
}

// MockMessagesRepositoryMockRecorder is the mock recorder for MockMessagesRepository.
type MockMessagesRepositoryMockRecorder struct {
	mock *MockMessagesRepository
}

// NewMockMessagesRepository creates a new mock instance.
func NewMockMessagesRepository(ctrl *gomock.Controller) *MockMessagesRepository {
	mock := &MockMessagesRepository{ctrl: ctrl}
	mock.recorder = &MockMessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesRepository) EXPECT() *MockMessagesRepositoryMockRecorder {
	return m.recorder
}

// ListSentMessages mocks base method.
func (m *MockMessagesRepository) ListSentMessages(ctx context.Context) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentMessages", ctx)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSentMessages indicates an expected call of ListSentMessages.
func (mr *MockMessagesRepositoryMockRecorder) ListSentMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentMessages", reflect.TypeOf((*MockMessagesRepository)(nil).ListSentMessages), ctx)
}

// ListUnsentMessages mocks base method.
func (m *MockMessagesRepository) ListUnsentMessages(ctx context.Context, limit int32) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnsentMessages", ctx, limit)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnsentMessages indicates an expected call of ListUnsentMessages.
func (mr *MockMessagesRepositoryMockRecorder) ListUnsentMessages(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsentMessages", reflect.TypeOf((*MockMessagesRepository)(nil).ListUnsentMessages), ctx, limit)
}

// UpdateSentStatus mocks base method.
func (m *MockMessagesRepository) UpdateSentStatus(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSentStatus indicates an expected call of UpdateSentStatus.
func (mr *MockMessagesRepositoryMockRecorder) UpdateSentStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentStatus", reflect.TypeOf((*MockMessagesRepository)(nil).UpdateSentStatus), ctx, id)
}
