// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	model "insider-go-project/internal/message-processor/storage/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageProcessorService is a mock of MessageProcessorService interface.
type MockMessageProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorServiceMockRecorder
}

// MockMessageProcessorServiceMockRecorder is the mock recorder for MockMessageProcessorService.
type MockMessageProcessorServiceMockRecorder struct {
	mock *MockMessageProcessorService
}

// NewMockMessageProcessorService creates a new mock instance.
func NewMockMessageProcessorService(ctrl *gomock.Controller) *MockMessageProcessorService {
	mock := &MockMessageProcessorService{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessorService) EXPECT() *MockMessageProcessorServiceMockRecorder {
	return m.recorder
}

// ListSentMessages mocks base method.
func (m *MockMessageProcessorService) ListSentMessages(ctx context.Context) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentMessages", ctx)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSentMessages indicates an expected call of ListSentMessages.
func (mr *MockMessageProcessorServiceMockRecorder) ListSentMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentMessages", reflect.TypeOf((*MockMessageProcessorService)(nil).ListSentMessages), ctx)
}

// StartScheduler mocks base method.
func (m *MockMessageProcessorService) StartScheduler(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScheduler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartScheduler indicates an expected call of StartScheduler.
func (mr *MockMessageProcessorServiceMockRecorder) StartScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScheduler", reflect.TypeOf((*MockMessageProcessorService)(nil).StartScheduler), arg0)
}

// StopScheduler mocks base method.
func (m *MockMessageProcessorService) StopScheduler(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopScheduler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopScheduler indicates an expected call of StopScheduler.
func (mr *MockMessageProcessorServiceMockRecorder) StopScheduler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScheduler", reflect.TypeOf((*MockMessageProcessorService)(nil).StopScheduler), arg0)
}

// MockMessageSchedulerService is a mock of MessageSchedulerService interface.
type MockMessageSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSchedulerServiceMockRecorder
}

// MockMessageSchedulerServiceMockRecorder is the mock recorder for MockMessageSchedulerService.
type MockMessageSchedulerServiceMockRecorder struct {
	mock *MockMessageSchedulerService
}

// NewMockMessageSchedulerService creates a new mock instance.
func NewMockMessageSchedulerService(ctrl *gomock.Controller) *MockMessageSchedulerService {
	mock := &MockMessageSchedulerService{ctrl: ctrl}
	mock.recorder = &MockMessageSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSchedulerService) EXPECT() *MockMessageSchedulerServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockMessageSchedulerService) Start() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMessageSchedulerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMessageSchedulerService)(nil).Start))
}

// Stop mocks base method.
func (m *MockMessageSchedulerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMessageSchedulerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMessageSchedulerService)(nil).Stop))
}
